// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dyveId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collection(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get duration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get expiryDateTime(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[9].value.toI32();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dyveId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dyveId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collection(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[6].value.toI32();
  }
}

export class Close extends ethereum.Event {
  get params(): Close__Params {
    return new Close__Params(this);
  }
}

export class Close__Params {
  _event: Close;

  constructor(event: Close) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dyveId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collection(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get returnedTokenId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class List extends ethereum.Event {
  get params(): List__Params {
    return new List__Params(this);
  }
}

export class List__Params {
  _event: List;

  constructor(event: List) {
    this._event = event;
  }

  get lender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dyveId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collection(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get duration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class Update extends ethereum.Event {
  get params(): Update__Params {
    return new Update__Params(this);
  }
}

export class Update__Params {
  _event: Update;

  constructor(event: Update) {
    this._event = event;
  }

  get dyveId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newCollateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newDuration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Dyve__getAllListingsResultValue0Struct extends ethereum.Tuple {
  get dyveId(): BigInt {
    return this[0].toBigInt();
  }

  get lender(): Address {
    return this[1].toAddress();
  }

  get borrower(): Address {
    return this[2].toAddress();
  }

  get expiryDateTime(): BigInt {
    return this[3].toBigInt();
  }

  get duration(): BigInt {
    return this[4].toBigInt();
  }

  get collection(): Address {
    return this[5].toAddress();
  }

  get tokenId(): BigInt {
    return this[6].toBigInt();
  }

  get collateral(): BigInt {
    return this[7].toBigInt();
  }

  get fee(): BigInt {
    return this[8].toBigInt();
  }

  get status(): i32 {
    return this[9].toI32();
  }
}

export class Dyve__getListingResultValue0Struct extends ethereum.Tuple {
  get dyveId(): BigInt {
    return this[0].toBigInt();
  }

  get lender(): Address {
    return this[1].toAddress();
  }

  get borrower(): Address {
    return this[2].toAddress();
  }

  get expiryDateTime(): BigInt {
    return this[3].toBigInt();
  }

  get duration(): BigInt {
    return this[4].toBigInt();
  }

  get collection(): Address {
    return this[5].toAddress();
  }

  get tokenId(): BigInt {
    return this[6].toBigInt();
  }

  get collateral(): BigInt {
    return this[7].toBigInt();
  }

  get fee(): BigInt {
    return this[8].toBigInt();
  }

  get status(): i32 {
    return this[9].toI32();
  }
}

export class Dyve__listingsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9))
    );
    return map;
  }

  getDyveId(): BigInt {
    return this.value0;
  }

  getLender(): Address {
    return this.value1;
  }

  getBorrower(): Address {
    return this.value2;
  }

  getExpiryDateTime(): BigInt {
    return this.value3;
  }

  getDuration(): BigInt {
    return this.value4;
  }

  getCollection(): Address {
    return this.value5;
  }

  getTokenId(): BigInt {
    return this.value6;
  }

  getCollateral(): BigInt {
    return this.value7;
  }

  getFee(): BigInt {
    return this.value8;
  }

  getStatus(): i32 {
    return this.value9;
  }
}

export class Dyve extends ethereum.SmartContract {
  static bind(address: Address): Dyve {
    return new Dyve("Dyve", address);
  }

  claimed_collateral(param0: BigInt): boolean {
    let result = super.call(
      "claimed_collateral",
      "claimed_collateral(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_claimed_collateral(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "claimed_collateral",
      "claimed_collateral(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAllListings(): Array<Dyve__getAllListingsResultValue0Struct> {
    let result = super.call(
      "getAllListings",
      "getAllListings():((uint256,address,address,uint256,uint256,address,uint256,uint256,uint256,uint8)[])",
      []
    );

    return result[0].toTupleArray<Dyve__getAllListingsResultValue0Struct>();
  }

  try_getAllListings(): ethereum.CallResult<
    Array<Dyve__getAllListingsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllListings",
      "getAllListings():((uint256,address,address,uint256,uint256,address,uint256,uint256,uint256,uint8)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Dyve__getAllListingsResultValue0Struct>()
    );
  }

  getListing(dyveId: BigInt): Dyve__getListingResultValue0Struct {
    let result = super.call(
      "getListing",
      "getListing(uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(dyveId)]
    );

    return changetype<Dyve__getListingResultValue0Struct>(result[0].toTuple());
  }

  try_getListing(
    dyveId: BigInt
  ): ethereum.CallResult<Dyve__getListingResultValue0Struct> {
    let result = super.tryCall(
      "getListing",
      "getListing(uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(dyveId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Dyve__getListingResultValue0Struct>(value[0].toTuple())
    );
  }

  listings(param0: BigInt): Dyve__listingsResult {
    let result = super.call(
      "listings",
      "listings(uint256):(uint256,address,address,uint256,uint256,address,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Dyve__listingsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toI32()
    );
  }

  try_listings(param0: BigInt): ethereum.CallResult<Dyve__listingsResult> {
    let result = super.tryCall(
      "listings",
      "listings(uint256):(uint256,address,address,uint256,uint256,address,uint256,uint256,uint256,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Dyve__listingsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toI32()
      )
    );
  }

  nft_has_open_listing(param0: Bytes): boolean {
    let result = super.call(
      "nft_has_open_listing",
      "nft_has_open_listing(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_nft_has_open_listing(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nft_has_open_listing",
      "nft_has_open_listing(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get dyveId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get dyveId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class ClaimCollateralCall extends ethereum.Call {
  get inputs(): ClaimCollateralCall__Inputs {
    return new ClaimCollateralCall__Inputs(this);
  }

  get outputs(): ClaimCollateralCall__Outputs {
    return new ClaimCollateralCall__Outputs(this);
  }
}

export class ClaimCollateralCall__Inputs {
  _call: ClaimCollateralCall;

  constructor(call: ClaimCollateralCall) {
    this._call = call;
  }

  get dyveId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCollateralCall__Outputs {
  _call: ClaimCollateralCall;

  constructor(call: ClaimCollateralCall) {
    this._call = call;
  }
}

export class ClosePositionCall extends ethereum.Call {
  get inputs(): ClosePositionCall__Inputs {
    return new ClosePositionCall__Inputs(this);
  }

  get outputs(): ClosePositionCall__Outputs {
    return new ClosePositionCall__Outputs(this);
  }
}

export class ClosePositionCall__Inputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }

  get dyveId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _returnTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClosePositionCall__Outputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }
}

export class ListCall extends ethereum.Call {
  get inputs(): ListCall__Inputs {
    return new ListCall__Inputs(this);
  }

  get outputs(): ListCall__Outputs {
    return new ListCall__Outputs(this);
  }
}

export class ListCall__Inputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateral(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _fee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ListCall__Outputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get dyveId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateral(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}
